use('restaurant');

// 1. Aggregation pipeline

function totalQtyMediumPizza() {
    const totalQty = db.orders.aggregate([
        // 1. filter by pizza size: return only medium size pizza
        // $match is called a pipeline stage (name)
        {
            $match: {
                size: "medium"
            }
        },

        // 2. group by name and for each group compute the total quantity
        {
            $group: {
                // _id is the id of each group. Here the id is the name of the pizza (group)
                _id: "$name",
                // sum quantity. Obligation: totalQuantity must be an accumulator object such as sum
                totalQuantity: {
                    $sum: "$quantity"
                }
            }
        }
    ]);
    return totalQty;
}

// 2. Single purpose aggregation methods
function singlePurposeAgg(choice) {
    if (choice === 'count') {
        // count number of documents in a collection or a view
        return db.orders.countDocuments();
    } else if (choice === 'distinct') {
        // returns an array of docs that have distinct values in the
        // specified field
        return db.orders.distinct("name");
    } else {
        // return an approximate count of the documents in a collection or a view
        return db.orders.estimatedDocumentCount();
    }
}

printjson(singlePurposeAgg(choice = 'count'));
printjson(singlePurposeAgg(choice = 'distinct'));
printjson(singlePurposeAgg(choice = ''));
