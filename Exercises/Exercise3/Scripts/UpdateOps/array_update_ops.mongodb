use('country_db');

// first, let's add a new currency document with an array
function addCurrencyWithArray() {
    db.currencies.insertOne(
        {
            currencyId: 300,
            currencyName: "fake currency",
            history: [25, 7, 18, 21, 30, -5, 15],
            embeddedDocuments: [
                { grade: 80, mean: 75, std: 8 },
                { grade: 85, mean: 90, std: 5 },
                { grade: 85, mean: 85, std: 8 }
            ]
        }
    );
}

// 1. $: to locate and modify an element of the array
// 1.1. change value of history to 0 where it is negative
function changeNegativeHistory() {
    db.currencies.updateOne(
        // filters
        {currencyId: 300, history: {$lt: 0}},
        // set
        {
            $set: {
                "history.$": 0
            }
        }
    );
};

// 1.2. change value of embeddedDocument std to 6 where grade is equal to 85 (first occurence: note - it's not related to updateOne)
function changeEmbeddedDocFieldValue() {
    db.currencies.updateOne(
        // filters
        {currencyId: 300, "embeddedDocuments.grade": 85},
        // set
        {
            $set: {
                "embeddedDocuments.$.std": 6  // means: update what follows $, i.e., std
            }
        }
    );
};

// 1.3. change value of embeddedDocument std to 11 where grade < 90 and mean > 80
// (first occurence: note - it's not related to updateOne)
function changeEmbeddedDocUsingElemMatch() {
    db.currencies.updateOne(
        // filters
        {
            currencyId: 300,
            embeddedDocuments: {
                $elemMatch: {
                    grade: { $lt: 90 },
                    mean: { $gt: 80 }
                }
            }
        },
        // set
        {
            $set: {
                "embeddedDocuments.$.std": 11
            }
        }
    );
};


// 2. $[]: modify all elements in the specified array field
// this correct the previous limitation (only the first occurence was updtated)

// 2.1. in simple embedded documents, let's increase grades by 5 for all students
function updateAllArrayElements() {
    db.currencies.updateOne(
        {
            currencyId: 300
        },
        {
            // $inc is analogous to $set so you cannot combine them hierarchically (I think)
            $inc: {
                "embeddedDocuments.$[].grade": 5  // update all grade satisfying the filter
            }
        }
    );
};


// 2.2. in complex embedded documents
// first, let's add a new document
function addComplexEmbeddedDocument() {
    db.currencies.insertOne(
        {
            currencyId: 300,
            currencyName: "fake currency",
            history: [25, 7, 18, 21, 30, -5, 15],
            embeddedDocuments: [
                { grade: 80, mean: 75, std: 8, questions: [ 10, 8, 5 ] },
                { grade: 85, mean: 90, std: 5, questions: [ 8, 9, 6 ] },
                { grade: 85, mean: 85, std: 8, questions: [25, 10, 23, 0] }
            ]
        }
    );
}

// use more than one $[], identifiers and arrayFilters
// increase by 2, for all docs embedded in embeddedDocuments, questions' elements
// provided that questions[score] > 8, where score is an identifier of questions' elements
// not that if you set upsert to true, you must specify exact equality instead of inequality
function updateAllElems2LevelEmbeddedDocuments() {
    db.currencies.updateOne(
        // filters
        {currencyId: 300},
        // update ops
        {
            $inc: {
                "embeddedDocuments.$[].questions.$[score]": 2
            }
        },
        // arrayFilters
        {
            arrayFilters: [
                {
                    "score": { $gt: 8}
                }
            ]
        }
    );
};


// 3. $addToSet: add an elem to an array unless the value is already present
// optionally, use $each modifier to add each element of the specified array.
function addToArrayIfNotExist() {
    db.currencies.updateOne(
        // filters
        {currencyId: 300},
        // operator
        {
            $addToSet: {
                history: -15,  // first doc
                history: -12,  // just for illustration
                history: [0, 1], // add as it is
                history: {
                    $each: ['a', 'b', 'c']  // add each elem in history and not as an array
                },
                "embeddedDocuments.$[].questions": -5  // for embedded arrays
            }
        }
    );
};


// 4. $pop: remove the first (-1) or last (1) element of an array
function removeLastElemOfArray() {
    db.currencies.updateOne(
        // filter
        { currencyId: 300},
        // pop ops
        {
            $pop: {
                "embeddedDocuments.$[].questions": 1  // remove the last elem of each sub-docs in embeddedDocuments
            }
        }
    );
};


// 5. $pull: the array must exist, remove all instances that matches the specified value or condition
// create a function that remove 0 in questions array for all sub-docs
function removeElemMatchesValueOrCondition() {
    db.currencies.updateOne(
        // filter
        { currencyId: 300},
        // pop ops
        {
            $pull: {
                "embeddedDocuments.$[].questions": { $eq: 0}
            }
        }
    );
};

removeElemMatchesValueOrCondition();
