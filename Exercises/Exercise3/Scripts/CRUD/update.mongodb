use('country_db');

// create a funcction to read documents
function printCountriesName() {
    const countries = db.countries.find({}, {country_name: true}).limit(3);
    printjson(countries);
};


// aggregate countries and capitalize the first letter of their name
function aggregateAndCapitalizeCountryName() {
    const outs = db.countries.aggregate([
        {
            $project: {
                "_id": false,
                "country_name": true,  // it is also possible to replace true by 1
                "capitalized_name": {$concat: [
                    {$toUpper: {$substrCP: ["$country_name", 0, 1]}},
                    {$toLower: {$substrCP: ["$country_name", 1, {$strLenCP: "$country_name"}]}}
                ]}
            }
        }
    ]);

    return outs;
}

// printjson(aggregateAndCapitalizeCountryName());

// create a function to capitalize countries' name first letter
function capitalizeCountriesName() {
    db.countries.updateMany({}, [
        {$set: {country_name: {$concat: [
            {$toUpper: {$substrCP: ["$country_name", 0, 1]}},
            {$toLower: {$substrCP: ["$country_name", 1, {$strLenCP: "$country_name"}]}}
        ]}}}
    ]);
};


// add a new field to countries documents that stores the number of letter of country_name field
function addLengthCountryName() {
    db.countries.updateMany({}, [
        // the field will be created as it doesn't exit yet before being populated by the length value
        {$set: {name_len: {$strLenCP: "$country_name"}}}
    ]);
};

function printCountriesMoreFields() {
    const projection = {
        country_name: true,
        name_len: true
    };
    const countries = db.countries.find({}, projection).limit(3);
    printjson(countries);
};

// create a function that store the current date each time the data is queried
// and count the number of time data was queried since the beginning. Limit the number
// of date stored to the last 10.
/**

{
            $push: {
                timeSeries: {
                    $each: [currentDate],
                    $slice: -10
                }
            }
        },

        $cond: [
                        { $exists: "$queryCount"},  // condition
                        { $add: ["$queryCount", 1]},  // value if true
                        1  // value if false
                    ]

*/
function dateTimeSeriesCountries() {
    const currentDate = new Date();
    // note: [] means it's an aggregation pipeline
    db.countries.updateMany({}, [
        {
            $set: {
                queryCount: {
                    $ifNull: [{$add: ["$queryCount", 1]}, 1]  // [value if not nul, value if null] 
                }
            }
        }
    ]);

    // $push does not work for the moment, so let's do it by another way
    db.countries.find({}).forEach(function(document) {
        // get current time series values
        let timeSeries = document.timeSeries || [];

        // push the current date
        timeSeries.push(currentDate);

        // get the last 10
        timeSeries = timeSeries.slice(-10);

        // now, replace previous values of timeSeries by the new one
        db.countries.updateOne({_id: document._id}, {
            $set: {timeSeries: timeSeries}
        });
    });
};

/**
 * create a function that add a new field (array) if not exists and if exists
 * update its unique value (only one value in the array) by the elapsed time
 * btw the current date and last value in timeSeries, in hours
 */

function elapsedTimeCountries() {
    const currentDate = new Date();

    // if you omit [] you will get unexpected result
    db.countries.updateMany({}, [
        {
            $set: {
                elapsedTime: {
                    $ifNull: [
                        {
                            $divide: [
                                {
                                    $subtract: [
                                        currentDate,
                                        {
                                            $arrayElemAt: ["$timeSeries", -1]
                                        }
                                    ]
                                },
                                3_600_000  // hour to milliseconds
                            ]
                        },
                        null  // if null or division by 0, affect 0
                    ]
                }
            }
        }
    ],
    {
        upsert: true  // if no doc matches the filters, a new one will be created
    });
};

// capitalizeCountriesName();
// addLengthCountryName();
// printCountriesMoreFields();
// dateTimeSeriesCountries();

elapsedTimeCountries();
