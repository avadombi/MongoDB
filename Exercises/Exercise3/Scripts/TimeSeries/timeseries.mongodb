use('timeSeriesDb');


// 1. create our time series collection
function createTimeSeries() {
    db.createCollection(
        // time series collection's name
        "temperature",
        // options to define this collection as a time series
        {
            timeseries: {  // indicate that the collection is a ts
                timeField: 'timestamp',  // field 'timestamp' contains the time data
                metaField: 'metadata',  // field 'metadata' contains the metadata
                granularity: 'seconds' // frequence at wich data is bucketed (grouped)
                // expireAfterSeconds: '86400'  update mongo to 5.x+ to work// delete document after these seconds (doc expire after zzz seconds)
            }
        }
    );
};


// 2. insert data
function insertDocuments() {
    db.temperature.insertMany([
        {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-18T00:00:00.000Z"),
            "temp": 12
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-18T04:00:00.000Z"),
            "temp": 11
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-18T08:00:00.000Z"),
            "temp": 11
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-18T12:00:00.000Z"),
            "temp": 12
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-18T16:00:00.000Z"),
            "temp": 16
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-18T20:00:00.000Z"),
            "temp": 15
         }, {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-19T00:00:00.000Z"),
            "temp": 13
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-19T04:00:00.000Z"),
            "temp": 12
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-19T08:00:00.000Z"),
            "temp": 11
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-19T12:00:00.000Z"),
            "temp": 12
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-19T16:00:00.000Z"),
            "temp": 17
         },
         {
            "metadata": { "sensorId": 5578, "type": "temperature" },
            "timestamp": ISODate("2021-05-19T20:00:00.000Z"),
            "temp": 12
         }
    ]);
};

// 3. query the time series
function findDocuments() {
    // get the first occurence matching this filter
    const outs = db.temperature.findOne({'temp': 12});
    return outs;
};

// 4. aggregation
function aggDocuments() {
    const outs = db.temperature.aggregate( [
        {
           // transfer two fields: date and temp
           $project: {
              // date field will be a document containing: 'year', 'month', ..., 'millisecond' fields
              date: {
                 $dateToParts: { date: "$timestamp" }
              },
              temp: 1
           }
        },
        {
           $group: {
              _id: {
                // as date is an embedded doc: date: {year:..., month:..., ...}
                // so, it group by date and based on the conventional _id form in $group
                // we should specify the values, this is why
                 date: {
                    year: "$date.year",
                    month: "$date.month",
                    day: "$date.day"
                 }
              },
              avgTmp: { $avg: "$temp" }
           }
        },
        {
            $set: {
                avgTmp: {
                    $round: ["$avgTmp", 2]
                }
            }
        }
    ])
    return outs;
};

printjson(aggDocuments().next());

